set main-view	= line-number:no,interval=5 id:no date:custom,format="%d.%m.%y %H:%M" author:full commit-title:yes,graph,refs,overflow=no

set refresh-mode = periodic
set refresh-interval = 1
set tab-size = 4

# User-defined commands
# ---------------------
# These commands allow to run shell commands directly from within Tig.
# Unless otherwise specified, commands are run in the foreground with
# their console output shown (as if '!' was specified). When multiple
# command options are specified their behavior are combined, e.g. "?<git
# commit" will prompt the user whether to execute the command and will
# exit Tig after completion.
#
#   !	Run the command in the foreground with output shown.
#   @	Run the command in the background with no output.
#   ?	Prompt the user before executing the command.
#   <	Exit Tig after executing the command.
#   >	Re-open Tig instantly in the last displayed view after executing the command.
#
# User-defined commands can optionally refer to Tig's internal state
# using the following variable names, which are substituted before
# commands are run:
#
#   %(head)		The current ref ID. Defaults to HEAD
#   %(commit)		The current commit ID.
#   %(blob)		The current blob ID.
#   %(branch)		The current branch name.
#   %(remote)		The current remote name.
#   %(tag)		The current tag name.
#   %(stash)		The current stash name.
#   %(directory)	The current directory path in the tree view;
#			empty for the root directory.
#   %(file)		The currently selected file.
#   %(ref)		The reference given to blame or HEAD if undefined.
#   %(revargs)		The revision arguments passed on the command line.
#   %(fileargs)		The file arguments passed on the command line.
#   %(cmdlineargs)	All other options passed on the command line.
#   %(diffargs)		The diff options from `diff-options` or `TIG_DIFF_OPTS`
#   %(prompt)		Prompt for the argument value.

# Normal commands
# ---------------

# Cursor navigation
bind generic	j	move-down
bind generic	k	move-up

# View manipulation
bind generic	<Enter>	enter			# Enter and open selected entry

bind generic	<Down>	next			# Move to next
bind generic	<Up>	previous		# Move to previous
bind generic	J	next
bind generic	K	previous

bind generic	,	parent			# Move to parent
bind generic	<Tab>	view-next		# Move focus to the next view
bind generic	<C-R>	refresh			# Reload and refresh view
bind generic	O	maximize		# Maximize the current view
bind generic	q	view-close		# Close the current view
bind generic	Q	quit			# Close all views and quit

bind generic	<PgDown> move-page-down
bind generic	<PgUp>	move-page-up
bind generic	<Home>	move-first-line
bind generic	<End>	move-last-line

bind generic	<Space>	move-page-down

# Scrolling
bind generic	<Left>	scroll-left
bind generic	<Right>	scroll-right
bind generic	<C-K>	scroll-line-up
bind generic	<C-J>	scroll-line-down

# Searching
bind generic	/	search
bind generic	?	search-back
bind generic	n	find-next
bind generic	N	find-prev

# Misc
bind generic	:	prompt			# Open the prompt

bind main	r	view-refs
bind main	d	view-diff
bind main	h	view-help
bind main	s	view-status
bind main	y	view-stash
bind main	g	view-grep
bind main   t   view-tree

bind main	C	?!git checkout %(commit)
bind main   N   @git branch "%(prompt New branch name: )" %(commit)
bind main   Y   !git stash push -m '%(prompt Stash message: )' -u
bind main   I   ?!git rebase -i %(commit)
bind main   B   ?!git rebase %(commit)
bind main   R   ?!git reset --hard %(commit)
bind main   T   @git tag "%(prompt Tag message: )" %(commit)
bind main   V   ?!git revert %(commit)
bind main   P   ?!git cherry-pick %(commit)

bind status	u	status-update		# Stage/unstage changes in file
bind status	c	?!git commit -v
bind status	d	status-revert		# Revert changes in file
bind status a   ?!git commit -av
bind status m   ?!git commit -v --amend
bind status n   ?!git commit --amend --no-edit

bind diff	@	:/^@@			# Jump to next (c)hunk
bind diff	[	:toggle diff-context -1
bind diff	]	:toggle diff-context +1

bind stage	u	status-update		# Stage/unstage current diff (c)hunk
bind stage	1	stage-update-line	# Stage/unstage current line
bind stage	r	status-revert		# Revert current diff (c)hunk
bind stage	\	stage-split-chunk	# Split current diff (c)hunk
bind stage	@	:/^@@			# Jump to next (c)hunk
bind stage	[	:toggle diff-context -1	# Decrease the diff context
bind stage	]	:toggle diff-context +1	# Increase the diff context

bind stash	a	?git stash apply %(stash)
bind stash	p	?git stash pop %(stash)
bind stash	d	?git stash drop %(stash)

bind refs   c	?!git checkout %(branch)
bind refs   d	?!git branch -d %(branch)
bind refs   D   ?!git push -d %(remote) %(branch)
bind refs   r   ?!git branch -f %(branch) "%(prompt Reset to branch: )"
bind refs   p   ?!git push -u "%(prompt Push to repo: )" %(branch)
bind refs   P   ?!git push -u origin %(branch)
bind refs   u   ?!git fetch "%(prompt Pull from repo: )" %(branch):%(branch)
bind refs   U   ?!git fetch origin %(branch):%(branch)
bind refs   f   ?!git fetch
bind refs   F   ?!git fetch --prune
bind refs   M   ?!git merge --no-ff %(branch) --log
bind refs   m   ?!git merge --ff %(branch)
bind refs   l   ?!git branch --track %(branch) %(remote)/%(branch)
